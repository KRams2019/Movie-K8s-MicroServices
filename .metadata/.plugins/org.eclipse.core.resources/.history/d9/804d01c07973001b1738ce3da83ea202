package com.mindtree.mymoviecatalogservice.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.mindtree.mymoviecatalogservice.entity.CatalogItem;
import com.mindtree.mymoviecatalogservice.entity.Movie;
import com.mindtree.mymoviecatalogservice.entity.MovieAvgRating;

import com.mindtree.mymoviecatalogservice.entity.Rating;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@Service
public class MovieInfoService {
	
	@Autowired
	RestTemplate restTemplate;
	
	private final String  movieUrl="http://movie-info-service/movies/";
		
	private final String  ratingUrl="http://rating-data-service/ratingsdata/";
	
	
	@HystrixCommand(fallbackMethod = "getCatalogItemFallback")
	public CatalogItem getCatalogItem(Rating rating) {
		Movie movie = restTemplate.getForObject(movieUrl+rating.getMovieId(), Movie.class);
        return new CatalogItem(movie.getName(), movie.getDescription(), rating.getRating());
	}
	
	public CatalogItem getCatalogItemFallback(Rating rating) {
        return new CatalogItem("Oops!! No Movie Available"," ",rating.getRating());
	}
	
	@HystrixCommand(fallbackMethod = "getMovieCatalogItemFallback")
	public List<MovieAvgRating> getMovieCatalog() {
		List<Rating> ratingList;
		List<Movie> movieList;
		
		System.err.println("Servicce Got Hit!!");
		
		 ResponseEntity<List<Rating>> ratingResponse = restTemplate.exchange("http://ratings-data-service/ratingsdata/rating", HttpMethod.GET,null,new ParameterizedTypeReference<List<Rating>>() {
			
		 });
		 ratingList=ratingResponse.getBody();
		
		 ResponseEntity<List<Movie>> movieResponse = restTemplate.exchange("http://movie-info-service/movies/getAll", HttpMethod.GET,null,new ParameterizedTypeReference<List<Movie>>() {
			});
		 movieList=movieResponse.getBody();
		System.err.println("===="+ratingList.get(0).getMovieId());
		System.err.println("++++"+movieList.get(0).getDescription());
		 
		double rating=0;
		List<MovieAvgRating> movieAvgRatingList=new ArrayList<MovieAvgRating>();
		int cnt=0;
		for(int j=0;j<movieList.size();j++) {
			
			MovieAvgRating movieAvgRating= new MovieAvgRating();
			for(int i=0;i<ratingList.size();i++) {  
        		if(ratingList.get(i).getMovieId()==movieList.get(j).getMovieId()) {
        				rating+=ratingList.get(i).getRating();
        				cnt++;
        		}
        		
        	}
			rating=rating/cnt;
    		movieAvgRating.setMovieId(movieList.get(j).getMovieId());
    		movieAvgRating.setMovieName(movieList.get(j).getName());
    		movieAvgRating.setDescription(movieList.get(j).getDescription());
    		movieAvgRating.setRating(rating);
			movieAvgRatingList.add(movieAvgRating);
			cnt=0;
			rating=0;
        }
		return movieAvgRatingList;
	}
	
	public List<MovieAvgRating> getMovieCatalogItemFallback() {
		System.err.println("Ckt Break!!");
       return Arrays.asList(new MovieAvgRating(0,0,"None","None"));
	}
	
	@HystrixCommand(fallbackMethod = "addMovieFallBackMethod")
	public Movie addMovie(Movie movie) {
		System.out.println(movieUrl);
		Movie returnMovie = restTemplate.postForObject(movieUrl+"addmovie",movie,Movie.class);
		return returnMovie;
	}
	

	public Movie addMovieFallBackMethod(Movie movie) {
		Movie returnMovie = new Movie(0,"None","None");
        return returnMovie;
	}
	

}
