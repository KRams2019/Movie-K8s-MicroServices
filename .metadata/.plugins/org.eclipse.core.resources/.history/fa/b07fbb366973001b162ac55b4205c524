package com.mindtree.mymoviecatalogservice.services;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.tomcat.util.digester.ArrayStack;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.mindtree.mymoviecatalogservice.entity.CatalogItem;
import com.mindtree.mymoviecatalogservice.entity.Movie;
import com.mindtree.mymoviecatalogservice.entity.MovieAvgRating;
import com.mindtree.mymoviecatalogservice.entity.MovieList;
import com.mindtree.mymoviecatalogservice.entity.Rating;
import com.mindtree.mymoviecatalogservice.entity.RatingList;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@Service
public class MovieInfoService {
	
	@Autowired
	RestTemplate restTemplate;
	
	@HystrixCommand(fallbackMethod = "getCatalogItemFallback")
	public CatalogItem getCatalogItem(Rating rating) {
		Movie movie = restTemplate.getForObject("http://movieinfo/movies/" + rating.getMovieId(), Movie.class);
        return new CatalogItem(movie.getName(), movie.getDescription(), rating.getRating());
	}
	
	public CatalogItem getCatalogItemFallback(Rating rating) {
		//Movie movie = restTemplate.getForObject("http://movie-info-service/movies/" + rating.getMovieId(), Movie.class);
        return new CatalogItem("Oops!! No Movie Available"," ",rating.getRating());
	}
	
	@HystrixCommand(fallbackMethod = "getMovieCatalogItemFallback")
	public List<MovieAvgRating> getMovieCatalog() {
		List<Rating> ratingList;
		List<Movie> movieList;
		//RatingList ratingList = restTemplate.getForObject("http://ratings-data-service/ratingsdata/rating", RatingList.class);
		 ResponseEntity<List<Rating>> ratingResponse = restTemplate.exchange("http://ratingdata/ratingsdata/rating", HttpMethod.GET,null,new ParameterizedTypeReference<List<Rating>>() {
			});
		 ratingList=ratingResponse.getBody();
		//MovieList movieList = restTemplate.getForObject("http://movie-info-service/movies/getAll", MovieList.class);
		 ResponseEntity<List<Movie>> movieResponse = restTemplate.exchange("http://movieinfo/movies/getAll", HttpMethod.GET,null,new ParameterizedTypeReference<List<Movie>>() {
			});
		 movieList=movieResponse.getBody();
		
		double rating=0;
		List<MovieAvgRating> movieAvgRatingList=new ArrayList<MovieAvgRating>();
		int cnt=0;
		for(int j=0;j<movieList.size();j++) {
			
			MovieAvgRating movieAvgRating= new MovieAvgRating();
			for(int i=0;i<ratingList.size();i++) {  
				//System.err.println(ratingList.get(i).getMovieId()+" --"+ratingList.size()+">>"+j);
        		if(ratingList.get(i).getMovieId()==movieList.get(j).getMovieId()) {
        			//System.err.println(ratingList.get(i).getMovieId());
        				rating+=ratingList.get(i).getRating();
        				cnt++;
        		}
        		
        	}
			rating=rating/cnt;
    		movieAvgRating.setMovieId(movieList.get(j).getMovieId());
    		movieAvgRating.setMovieName(movieList.get(j).getName());
    		movieAvgRating.setDescription(movieList.get(j).getDescription());
    		movieAvgRating.setRating(rating);
			movieAvgRatingList.add(movieAvgRating);
			cnt=0;
			rating=0;
        }
		return movieAvgRatingList;
	}
	
	public List<MovieAvgRating> getMovieCatalogItemFallback() {
		//Movie movie = restTemplate.getForObject("http://movie-info-service/movies/" + rating.getMovieId(), Movie.class);
       return Arrays.asList(new MovieAvgRating(0,0,"None","None"));
	}
	
	@HystrixCommand(fallbackMethod = "addMovieFallBackMethod")
	public Movie addMovie(Movie movie) {
		//System.err.println(movie.getName()+"!!!");
		Movie returnMovie = restTemplate.postForObject("http://movieinfo/movies/addmovie",movie,Movie.class);
		//System.out.println(returnMovie.getMovieId()+" "+returnMovie.getName());
		return returnMovie;
	}
	

	public Movie addMovieFallBackMethod(Movie movie) {
		Movie returnMovie = new Movie(0,"None","None");
        return returnMovie;
	}
	

}